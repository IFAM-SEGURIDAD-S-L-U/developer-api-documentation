openapi: 3.0.0
info:
  version: 1.0.0
  title: IFAM API
  description: Specification for IFAM's smartlock API
  contact:
    name: IFAM SEGURIDAD SL
    url: http://www.ifam.es/
paths:
  /api/device/pairable:
    post:
      tags:
        - Device
      summary: Check if smartlock is pairable
      requestBody:
        description: |
          The `serialnumber` value to be used in this endpoint must be the one that can be found printed in the smartlock box. The `mac` adress can be found performing the standard discovery of the smartlock described in the official documentation. FIXME: Use the link to the official documentation, to the section where the pairing process is described.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pairableRequest'
      responses:
        '200':
          $ref: '#/components/responses/PairableResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/device/pair/encrypted:
    post:
      tags:
        - Device
      summary: Pair smartlock (encrypted)
      description: |
        Use this endpoint to pair a smartlock with the user account whose identity is specified in the OpenID Connect ID token used for the request.
      requestBody:
        description: |
          The pairing operation performs two actions. On the one hand, it stores the values passed in the `device` key as the smartlock's current status. On the other hand, it creates a smartlock admin key using the values passed in the `key` key, and assigns that key to the user account whose identity is specified in the OpenID Connect ID token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pairEncryptedRequest'
      responses:
        '200':
          $ref: '#/components/responses/pairDeviceEncryptedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/device/user/encrypted:
    get:
      tags:
        - Device
      summary: Get user smartlocks (encrypted)
      description: |
        Use this endpoint to get a list of the smartlocks owned by the user account whose identity is specified in the OpenID Connect ID token used for the request.
      responses:
        '200':
          $ref: '#/components/responses/getUserDevicesEncryptedResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/device/{device_id}:
    delete:
      tags:
        - Device
      summary: Unpair smartlock by ID
      description: |
        Use this endpoint to unpair a smartlock, with the specified `device_id`, from the user the user account whose identity is specified in the OpenID Connect ID token used for the request.
      parameters:
        - name: device_id
          description: |
            The `device_id` that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/deleteDeviceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
  /api/device/{device_id}/encrypted:
    get:
      tags:
        - Device
      summary: Get smartlock info (encrypted)
      description: |
        Use this endpoint to get the details of the smartlock with the specified `device_id`.
      parameters:
        - name: device_id
          description: |
            The `device_id` that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/getDeviceEncryptedResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
  /api/device/key/{device_id}/encrypted:
    get:
      tags:
        - Device
      summary: Get smartlock keys (encrypted)
      description: |
        Use this endpoint to get the keys of the smartlock with the specified `device_id`.
      parameters:
        - name: device_id
          description: |
            The `device_id` that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/getDeviceKeysEncryptedResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
  /api/device/other-key/{device_id}:
    get:
      tags:
        - Device
      summary: Get smartlock other keys
      description: |
        Use this endpoint to get the other keys of the smartlock with the specified `device_id`.
      parameters:
        - name: device_id
          description: |
            The `device_id` that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/getDeviceOtherKeysResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
  /api/device/missing-key/{device_id}:
    get:
      tags:
        - Device
      summary: Get missing keys for device
      description: |
        Use this endpoint to get the missing keys of the smartlock with the specified `device_id`.
      parameters:
        - name: device_id
          description: |
                The `device_id` that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/getDeviceMissingKeysResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
  /api/device:
    put:
      tags:
        - Device
      summary: Update device
      description: |
        Use this endpoint to update the smartlock properties using its `id`, that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
      requestBody:
        required: true
        description: |
          The body is a JSON object that can contain any of the keys defined in the schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateDeviceRequest'
      responses:
        '200':
          $ref: '#/components/responses/updateDeviceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/device/encrypted:
    put:
      tags:
        - Device
      summary: Update device (encrypted)
      description: |
        Use this endpoint to update the smartlock properties using its `id`, that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
      requestBody:
        required: true
        description: |
          The body is a JSON object that can contain any of the keys defined in the schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateDeviceRequest'
      responses:
        '200':
          $ref: '#/components/responses/updateDeviceResponseEncrypted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/device/mac:
    put:
      tags:
        - Device
      summary: Set device MAC address
      description: |
        Use this endpoint to update the smartlock MAC address using its `id`, that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
      requestBody:
        required: true
        description: |
          The body is a JSON object that contains the `id` of the device and the new `mac` address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setDeviceMacAdressRequest'
      responses:
        '200':
          $ref: '#/components/responses/simpleSuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/device/counter:
    put:
      tags:
        - Device
      summary: Set device counter
      description: |
        Use this endpoint to update the smartlock admin counter using its `id`, that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
      requestBody:
        required: true
        description: |
          The body is a JSON object that contains the `id` of the device and the new `admincounter` value.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setDeviceCounterRequest'
      responses:
        '200':
          $ref: '#/components/responses/simpleSuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/device/keys-check:
    post:
      tags:
        - Device
      summary: Check smartlock keys
      description: |
         Use this endpoint to check the smartlock keys, for the smartlock identified by its `device_id` . It verifies that the keys provided in the request match the keys stored in the database for the specified device. And if they do not match, it synchronizes the keys stored in the database with the keys sent in the request.
      requestBody:
        required: true
        description: |
          `last_bluetooth_connection` contains the timestamp of the last Bluetooth connection to the device, in milliseconds since epoch. This is used to determine if the device has been recently connected.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/checkDeviceKeysRequest'
      responses:
        '200':
          $ref: '#/components/responses/checkDeviceKeysResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/event/{device_id}:
    get:
      tags:
        - Event
      summary: Gets all the events from a smartlock.
      description: |
        Use this endpoint to get all the events for the smartlock identified by `device_id`
      parameters:
        - name: device_id
          description: |
            The `device_id` that was returned by `/api/device/pair/encrypted` when the smartlock was paired.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/getEventResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
  /api/event:
    post:
      tags:
        - Event
      summary: Create an event
      description: |
        Use this endpoint to create an event related to an  smartlock, identified by its `device_id`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEventRequest'
      responses:
        '200':
          $ref: '#/components/responses/createEventResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UserNotDeviceUser'
components:
  schemas:
    pairableRequest:
      type: object
      properties:
        serialnumber:
          type: string
          example: serial-number-1
        mac:
          type: string
          example: AA:BB:CC:DD:EE:FF
      required:
        - serialnumber
        - mac
    BasicResponse:
      type: object
      properties:
        success?:
          type: boolean
    DeviceRequest:
      type: object
      properties:
        name:
          type: string
          example: device-01
        type:
          type: string
          example: DESI
        utopickey:
          type: string
          example: 15d14e8fef9547a7
        adminkey:
          type: string
          example: abcdef12
        mac:
          type: string
          example: AA:BB:CC:DD:EE:FF
        serialnumber:
          type: string
          example: serial-number-1
        admincounter:
          type: integer
          example: 15
        timezone:
          type: string
          example: Europe/Madrid
        description:
          type: string
        first-pairing-at:
          type: string
          format: date-time
        last-update:
          type: integer
      required:
        - name
        - type
        - utopickey
        - adminkey
        - mac
        - serialnumber
        - admincounter
        - timezone
    KeyRequest:
      type: object
      properties:
        userkey:
          type: string
          example: deadbeef
        counter:
          type: integer
          example: 1
        name:
          type: string
          example: Admin Key
        keystatus:
          type: string
          example: created
        usernum:
          type: string
          example: U01
        usernum-id:
          type: string
          example: abcdef
        last-update:
          type: integer
      required:
        - userkey
        - counter
        - name
        - keystatus
        - usernum
        - usernum-id
    pairEncryptedRequest:
      type: object
      properties:
        device:
          $ref: '#/components/schemas/DeviceRequest'
        key:
          $ref: '#/components/schemas/KeyRequest'
      required:
        - device
        - key
    Gateway:
      type: object
      properties:
        pairing_id:
          type: string
        pair_status:
          type: string
        gateway_id:
          type: string
          format: uuid
        name:
          type: string
        ble_connection:
          type: boolean
        last_connection:
          type: string
          format: date-time
        status:
          type: string
        gateway_battery:
          type: integer
        power_source:
          type: string
        mac:
          type: string
    Device:
      type: object
      properties:
        device_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        owner_id:
          type: string
          format: uuid
        timezone:
          type: string
        type:
          type: string
          enum:
            - DESI
        mac:
          type: string
        serial_number:
          type: string
        admincounter:
          type: integer
        devicestatus:
          type: string
          enum:
            - created
            - no-id
        state:
          type: string
          enum:
            - open
            - close
        syncstatus:
          type: string
        semi_auto_mode:
          type: boolean
        auto_lock_time:
          type: integer
        auto_lock_state:
          type: boolean
        resbalon:
          type: integer
        round_number:
          type: integer
        motor_direction:
          type: integer
        buzzer_state:
          type: boolean
        first_pairing_at:
          type: string
          format: date-time
          nullable: true
        last_update:
          type: integer
        last_sync_attempted_at:
          type: string
          format: date-time
        last_sync_succeeded_at:
          type: string
          format: date-time
          nullable: true
        utopickey:
          type: string
        adminkey:
          type: string
        gateways:
          type: array
          items:
            $ref: '#/components/schemas/Gateway'
    Key:
      type: object
      properties:
        key_id:
          type: string
          format: uuid
        role:
          type: string
        schedule:
          type: string
        phone:
          type: string
        key_name:
          type: string
        keystatus:
          type: string
        type:
          type: string
        usernum:
          type: string
        usernum_id:
          type: string
        schedulestatus:
          type: string
        counter:
          type: integer
        mine:
          type: boolean
        last_update:
          type: integer
        user_id:
          type: string
          format: uuid
        device_id:
          type: string
          format: uuid
        display_name:
          type: string
        userkey:
          type: string
        utopickey:
          type: string
    OtherKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
        device_id:
          type: string
          format: uuid
        type:
          type: string
        name:
          type: string
        keystatus:
          type: string
        usernum:
          type: string
        schedule:
          type: string
        schedulestatus:
          type: string
        last_update:
          type: integer
        usernum_id:
          type: string
    MissingKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
        device_id:
          type: string
          format: uuid
        usernum:
          type: string
        usernum_id:
          type: string
        keystatus:
          type: string
        last_update:
          type: integer
        type:
          type: string
    updateDeviceRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        state:
          type: string
        last-update:
          type: integer
        timezone:
          type: string
        mac:
          type: string
        resbalon:
          type: integer
        round-number:
          type: integer
        buzzer-state:
          type: boolean
        motor-direction:
          type: integer
        auto-lock-state:
          type: boolean
        auto-lock-time:
          type: integer
        semi-auto-mode:
          type: boolean
        day-mode:
          type: string
        battery:
          type: integer
        daymodestatus:
          type: string
        syncstatus:
          type: string
        syncstatus-error:
          type: string
        daymodestatus-error:
          type: string
        first-pairing-at:
          type: string
          format: date-time
      required:
        - id
      example:
        id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
        name: device-01
        description: local-dev-device-01
        state: close
        timezone: Europe/Madrid
        day-mode: '0000000000'
        battery: -1
        daymodestatus: no-pending-daymode
    setDeviceMacAdressRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        mac:
          type: string
          example: AA:BB:CC:DD:EE:FF
      required:
        - id
        - mac
    setDeviceCounterRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        admincounter:
          type: number
      required:
        - id
        - admincounter
    checkDeviceKeysRequest:
      type: object
      properties:
        device_id:
          type: string
          format: uuid
        device_keys:
          type: string
          pattern: "^(<U[0-9a-fA-F]{2}:[0-9a-fA-F]{6}>)+(<UEND>)$"
          example:
            "<U01:abcdef><U02:123456><UEND>"
        last_bluetooth_connection:
          type: number
          example: 1746619812243
      required:
        - device_id
        - device_keys
        - last_bluetooth_connection
    createEventRequest:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          example: '2025-05-21T12:00:00Z'
        type:
          type: string
          format: enum
          example: open
        device_id:
          type: string
          format: uuid
        status:
          type: string
          format: enum
          example: failed
        source:
          type: string
          format: enum
          example: device
        details:
          type: string
        usernum:
          type: integer
        key_id:
          type: string
          format: uuid
        other_key_id:
          type: string
          format: uuid
      required:
        - created_at
        - type
        - device_id
        - status
        - source
  responses:
    BadRequest:
      description: |
        Invalid request. This endpoint uses [Clojure Spec validations](https://clojure.org/guides/spec). The `problems` array contains detailed information about which keys were missing or invalid.  Multiple validation errors can be returned at once, depending on which fields in  the request are invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              problems:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: array
                      items: { }
                    pred:
                      type: array
                      items: { }
                    val:
                      type: object
                    via:
                      type: array
                      items:
                        type: string
                    in:
                      type: array
                      items: { }
              spec:
                type: string
              value:
                type: object
          example:
            problems:
              - path: [ ]
                pred:
                  - clojure.core/fn
                  - '%'
                  - - clojure.core/contains?
                    - '%'
                    - mac
                val: { }
                via:
                  - ifam.api.device/device-has-owner?
                in: [ ]
              - path: [ ]
                pred:
                  - clojure.core/fn
                  - '%'
                  - - clojure.core/contains?
                    - '%'
                    - serialnumber
                val: { }
                via:
                  - ifam.api.device/device-has-owner?
                in: [ ]
            spec: ifam.api.device/device-has-owner?
            value: { }
    PairableResponse:
      description: Pairable check response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicResponse'
          examples:
            pairable:
              summary: Device is pairable
              value:
                success?: true
            alreadyPaired:
              summary: Device already paired
              value:
                success?: false
                reason: device-already-paired
            unknownSerial:
              summary: Serial number not found
              value:
                success?: false
                reason: unkown-serial-number
    Unauthorized:
      description: Unauthorized - Missing or invalid OpenID Connect ID token.
      content:
        application/json:
          example:
            error: Authentication required
    pairDeviceEncryptedResponse:
      description: |
        Response after attempting to pair smartlock (encrypted). If the `success?` key is `true`,  then the `userkey` and  `adminkey` values are returned encrypted with the algorithm described  in the developer documentation. FIXME(link,...). If the `success?` key is `false`, it returns  the `reason` key with details about the error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success?:
                type: boolean
              reason:
                type: string
                nullable: true
              device_id:
                type: string
                format: uuid
              key_id:
                type: string
                format: uuid
              userkey:
                type: string
              adminkey:
                type: string
          examples:
            success:
              summary: Device successfully paired
              value:
                success?: true
                device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                key_id: 51d59aa8-71b3-49c5-afb8-44915a4d4acb
                userkey: c5bc3005936a72205de8b94e9dd8ca9edcefe1186b9af38995595fb2b1c3bf188e08d2956f0a9146321d633b0dc86473
                adminkey: 865bdf3900ef0326ddf717f0f66c7d636073c59ce152c222bcf74e366cfc0ebfaee8205d27c68c2adc85f7c77ca6bcca
            alreadyPaired:
              summary: Device already paired
              value:
                success?: false
                reason: device-already-paired
            unkonwSerialNumber:
              summary: Serial number not found
              value:
                succes?: false
                reason: unknown-serial-number
    getUserDevicesEncryptedResponse:
      description: |
        Response after attempting to get the list of smartlocks for the current user (encrypted) . If the `success?` key is `true`, then the  `userkey` and `adminkey` values of the smartlocks are returned encrypted with the algorithm described in the developer documentation. FIXME(link,...). If the `success?` key is `false`, it returns the `reason` key with details about the error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success?:
                type: boolean
              devices:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
          examples:
            noDevices:
              summary: No devices paired
              value:
                success?: true
                devices: []
            withDevices:
              summary: Devices paired
              value:
                success?: true
                devices:
                  - description: local-dev-device-01
                    owner_id: 7f07c031-cbcb-49c3-a4ee-973492db8ef9
                    timezone: Europe/Madrid
                    syncstatus: null
                    admincounter: 15
                    devicestatus: created
                    semi_auto_mode: false
                    first_pairing_at: '2019-10-10T10:00:00Z'
                    name: device-01
                    last_sync_succeeded_at: null
                    day_mode: '0000000000'
                    type: DESI
                    battery: -1
                    state: close
                    round_number: 2
                    gateways: []
                    auto_lock_time: 0
                    last_update: 1746619812243
                    daymodestatus: no-pending-daymode
                    last_sync_attempted_at: null
                    adminkey: 46a7b179eccd6a4d70304cde9005beea42f7a9c8e2f9a592d83a00c096661ac0e225fcb980ada09e75b80774dfb50641
                    auto_lock_state: true
                    device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                    resbalon: 0
                    motor_direction: 0
                    serial_number: serial-number-1
                    mac: AA:BB:CC:DD:EE:FF
                    utopickey: 15d14e8fef9547a7
                    buzzer_state: false
            unknownSerial:
              summary: Serial number not found
              value:
                success?: false
                reason: unkown-serial-number
    deleteDeviceResponse:
      description: Smartlock unpaired successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              device_id:
                type: string
                format: uuid
          example:
            success: true
            device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
    UserNotDeviceUser:
      description: |
        Forbidden – The user is not authorized to access the specified smartlock. This response may also appear if the request body is invalid or incomplete, preventing the server from resolving which smartlock is being referenced.
      content:
        application/json:
          schema:
            type: object
            properties:
              success?:
                type: boolean
              reason:
                type: string
          example:
            success?: false
            reason: user-is-not-device-user
    getDeviceEncryptedResponse:
      description: |
        Response after attempting to retrieve the smartlock information. If the `success?` key is `true`, then the `userkey` and `adminkey` values of the smartlock (if present) are returned encrypted with the algorithm described in the developer documentation. FIXME(link,...). If the `success?` key is `false`, it returns the `reason` key with details about the error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success?:
                type: boolean
              device:
                type: object
                properties:
                  description:
                    type: string
                  owner_id:
                    type: string
                    format: uuid
                  timezone:
                    type: string
                  syncstatus:
                    type: string
                    nullable: true
                  admincounter:
                    type: integer
                  devicestatus:
                    type: string
                  semi_auto_mode:
                    type: boolean
                  first_pairing_at:
                    type: string
                    format: date-time
                    nullable: true
                  name:
                    type: string
                  last_sync_succeeded_at:
                    type: string
                    format: date-time
                    nullable: true
                  day_mode:
                    type: string
                  type:
                    type: string
                  battery:
                    type: integer
                  state:
                    type: string
                  round_number:
                    type: integer
                  gateways:
                    type: array
                    items:
                      type: object
                  auto_lock_time:
                    type: integer
                  last_update:
                    type: integer
                  daymodestatus:
                    type: string
                  last_sync_attempted_at:
                    type: string
                    format: date-time
                    nullable: true
                  adminkey:
                    type: string
                  auto_lock_state:
                    type: boolean
                  device_id:
                    type: string
                    format: uuid
                  resbalon:
                    type: integer
                  motor_direction:
                    type: integer
                  serial_number:
                    type: string
                  mac:
                    type: string
                  utopickey:
                    type: string
                  buzzer_state:
                    type: boolean
          examples:
            successful:
              summary: |
                Successful retrieval
              value:
                success?: true
                device:
                  description: local-dev-device-01
                  owner_id: 7f07c031-cbcb-49c3-a4ee-973492db8ef9
                  timezone: Europe/Madrid
                  syncstatus: null
                  admincounter: 15
                  devicestatus: created
                  semi_auto_mode: false
                  first_pairing_at: '2019-10-10T10:00:00Z'
                  name: device-01
                  last_sync_succeeded_at: null
                  day_mode: '0000000000'
                  type: DESI
                  battery: -1
                  state: close
                  round_number: 2
                  gateways: []
                  auto_lock_time: 0
                  last_update: 1746619812243
                  daymodestatus: no-pending-daymode
                  last_sync_attempted_at: null
                  adminkey: d9ebe546515e2839f9c4375266b65fd59a882d19a57e9443c3590f5a110050a719f8016033c5ec400eef3e6208ed4921
                  auto_lock_state: true
                  device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                  resbalon: 0
                  motor_direction: 0
                  serial_number: serial-number-1
                  mac: AA:BB:CC:DD:EE:FF
                  utopickey: 15d14e8fef9547a7
                  buzzer_state: false
            error:
              summary: |
                Connection to the database failed
              value:
                success?: false
                reason: database-connection-failed
    getDeviceKeysEncryptedResponse:
      description: |
        Response after attempting to retrieve the smartlock keys. If the `success?` key is `true`, then the `userkey` and `adminkey` values of the smartlock (if present) are returned encrypted with the algorithm described in the developer documentation. FIXME(link,...). If the `success?` key is `false`, it returns the `reason` key with details about the error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              keys:
                type: array
                items:
                  $ref: '#/components/schemas/Key'
          examples:
            successful:
              summary: |
                Successful smartlock keys retrieval
              value:
                success: true
                keys:
                  - role: admin
                    schedule: 7F0101000101000000
                    key_id: 51d59aa8-71b3-49c5-afb8-44915a4d4acb
                    phone: '+34666666666'
                    key_name: Admin Key
                    keystatus: created
                    type: mobile-app
                    usernum: U01
                    usernum_id: abcdef
                    schedulestatus: no-pending-schedule
                    counter: 1
                    mine: true
                    last_update: 1746619812243
                    user_id: 7f07c031-cbcb-49c3-a4ee-973492db8ef9
                    device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                    display_name: user-01-A
                    userkey: e03b784130755b5ae3477051ca8d92a898794856f50be442cb1ebdbea53bdbba90fbefc089e76ef8514540817655b655
                    utopickey: 15d14e8fef9547a7
            error:
              summary: |
                Connection to the database failed
              value:
                success?: false
                reason: database-connection-failed
    getDeviceOtherKeysResponse:
      description: |
        Response after attempting to retrieve the smartlock other keys. If the `success?` key is `true`, then the userkey` and adminkey` values of the smartlock (if present) are returned encrypted with the algorithm described in the developer documentation. FIXME(link,...). If the `success?` key is `false`, it returns the `reason` key with details about the error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              other_keys:
                type: array
                items:
                  $ref: '#/components/schemas/OtherKey'
          examples:
            no-other-keys:
              summary: |
                There are no other keys
              value:
                success: true
                other_keys: []
            other-keys:
              summary: |
                There are other keys
              value:
                success?: true
                other_keys:
                  - id: fc927b85-1b82-4954-af22-965e36270193
                    device_id: fc927b85-1b82-4954-af22-965e36270122
                    type: remote
                    name: hugos remote key
                    keystatus: created
                    usernum: U2F
                    schedule: 7F0101000101000000
                    schedulestatus: no-pending-schedule
                    last_update: 1750179263000
                    usernum_id: 0
                  - id: fc927b85-1b82-4954-af22-965e36270193
                    device_id: fc927b85-1b82-4954-af22-965e36270122
                    type: remote
                    name: hugos remote key
                    keystatus: created
                    usernum: U2F
                    schedule: 7F0101000101000000
                    schedulestatus: no-pending-schedule
                    last_update: 1750179263000
                    usernum_id: 0
            error:
              summary: |
                Connection to the database failed
              value:
                success?: false
                reason: database-connection-failed
    getDeviceMissingKeysResponse:
      description: |
        Response after attempting to retrieve the smartlock missing keys. If the `success?` key is `true`, then the list of existing missing keys is returned. If the `success?` key is `false`, it returns the `reason` key with details about the error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              missing_keys:
                type: array
                items:
                  $ref: '#/components/schemas/MissingKey'
          examples:
            there-are-no-missing-keys:
              summary: There are no missing keys
              value:
                success: true
                missing_keys: []
            there-are-missing-keys:
              summary: There are missing keys
              value:
                success?: true
                missing_keys:
                  - id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                    device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                    usernum: U01
                    usernum_id: abcdef
                    keystatus: created
                    last_update: 1746619812243
                    type: mobile-app
            error:
              summary: |
                Connection to the database failed
              value:
                success?: false
                reason: database-connection-failed
    updateDeviceResponse:
      description: |
        Response after attempting to update the smartlock properties. If the `success?` key is `true`, then the list of updated properties is returned. If the `success?` key is `false`, it returns the `reason` key with details about the error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              device:
                type: object
                properties:
                  name:
                    type: string
                  last_update:
                    type: integer
                  device_id:
                    type: string
                    format: uuid
          examples:
            successful:
              summary: Device successfully updated
              value:
                success: true
                device:
                  name: Updated Device Name
                  last_update: 1746620109474
                  device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
            error:
              summary: |
                Connection to the database failed
              value:
                success?: false
                reason: database-connection-failed
    updateDeviceResponseEncrypted:
      description: |
        Response after attempting to update the smartlock properties. If the `success?` key is `true`, then the list of updated properties is returned. If the `userkey` or `adminkey` values of the smartlock have been updated, they will be returned encrypted with the algorithm described in the developer documentation. FIXME(link,...). If the `success?` key is `false`, it returns the `reason` key with details about the error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              device:
                type: object
                properties:
                  name:
                    type: string
                  last_update:
                    type: integer
                  device_id:
                    type: string
                    format: uuid
          examples:
            successful:
              summary: Device successfully updated
              value:
                success: true
                device:
                  name: Updated Device Name
                  last_update: 1746620109474
                  device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                  userkey: e03b784130755b5ae3477051ca8d92a898794856f50be442cb1ebdbea53bdbba90fbefc089e76ef8514540817655b655
            error:
              summary: |
                Connection to the database failed
              value:
                success?: false
                reason: database-connection-failed
    simpleSuccessResponse:
      description: Update successful
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
          example:
            success?: true
    checkDeviceKeysResponse:
      description: Result of device keys verification. Indicates whether the provided keys match those stored in the database for the specified device. If they do not match, the keys stored in the database are synchronized with those sent in the request.
      content:
        application/json:
          schema:
            type: object
            properties:
              success?:
                type: boolean
              data:
                type: array
                items:
                  anyOf:
                    - type: object
                      properties:
                        device_id:
                          type: string
                          format: uuid
                        key_id:
                          type: string
                          format: uuid
                        action:
                          type: string
                    - nullable: true
          example:
            success?: true
            data:
              - null
              - device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                key_id: 08f2b690-7648-4dd8-8b59-3067514f288f
                action: create-missing-key
    getEventResponse:
      description: |
        Response after attempting to get all the events for the smartlock. If the `success?` key is `true`, then the list of events is returned. If the `success?` key is `false`, it returns the `reason` key with details about the error.
      content:
        application/json:
          examples:
            noEvents:
              summary: Device has no associated events
              value:
                success?: true
                events: []
            withEvents:
              summary: Device has one or more associated events
              value:
                success?: true
                events:
                  - device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                    type: open
                    source: device
                    status: completed
                    id: fafab218-d335-42e3-bc32-d1e35151458a
                    created_at: '2025-05-21T12:00:00Z'
            error:
              summary: |
                Connection to the database failed
              value:
                success?: false
                reason: database-connection-failed
    createEventResponse:
      description: |        
        Response after attempting to create an event for the smartlock. If the `success?` key is `true`, then the created event is returned. If the `success?` key is `false`, it returns the `reason` key with details about the error, including if the event already exists.
      content:
        application/json:
          examples:
            eventCreated:
              summary: Event successfully created
              value:
                success?: true
                event:
                  device_id: 15d14e8f-ef95-47a7-a3be-3f0daca8aba5
                  type: open
                  source: device
                  status: failed
                  id: 14a6e4ff-ccac-4945-9cd5-6d9659e10b01
                  created_at: '2025-05-21T12:00:00Z'
            alreadyExists:
              summary: Event already exists
              value:
                success?: false
                reason: already-exists
            error:
              summary: |
                Connection to the database failed
              value:
                success?: false
                reason: database-connection-failed
    InternalServerError:
      description: Internal server error due to missing `source` field (bug in validation)
      content:
        application/json:
          examples:
            missingSource:
              summary: Missing `source` field causes server error
              value:
                success?: false
                reason: internal-server-error
